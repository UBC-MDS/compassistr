[{"path":[]},{"path":"https://ubc-mds.github.io/compassistr/CONDUCT.html","id":"team-19-dsci-524-group-project---compassist","dir":"","previous_headings":"","what":"Team 19 DSCI-524 Group Project - compassist","title":"Code of Conduct","text":"project created students Group 19 - Block 4 Master Data Science program fulfill requirements course DSCI524. project adhere code conduct proposed University British Columbia.","code":""},{"path":"https://ubc-mds.github.io/compassistr/CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Code of Conduct","text":"interest fostering open welcoming environment, contributors maintainers pledge making participation project community harassment-free experience everyone, regardless age, body size, disability, ethnicity, gender identity expression, level experience, nationality, personal appearance, race, religion, sexual identity orientation.","code":""},{"path":"https://ubc-mds.github.io/compassistr/CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Code of Conduct","text":"Examples behavior contributes creating positive environment include: Using welcoming inclusive language respectful differing viewpoints experiences Gracefully accepting constructive criticism Focusing best community Showing empathy towards community members Examples unacceptable behavior participants include: use sexualized language imagery unwelcome sexual attention advances Trolling, insulting/derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical electronic address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://ubc-mds.github.io/compassistr/CONDUCT.html","id":"our-responsibilities","dir":"","previous_headings":"","what":"Our Responsibilities","title":"Code of Conduct","text":"Project maintainers responsible clarifying standards acceptable behavior expected take appropriate fair corrective action response instances unacceptable behavior. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, ban temporarily permanently contributor behaviors deem inappropriate, threatening, offensive, harmful.","code":""},{"path":"https://ubc-mds.github.io/compassistr/CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Code of Conduct","text":"Code Conduct applies within project spaces public spaces individual representing project community. Examples representing project community include using official project e-mail address, posting via official social media account, acting appointed representative online offline event. Representation project may defined clarified project maintainers.","code":""},{"path":"https://ubc-mds.github.io/compassistr/CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported contacting project team ash2507@student.ubc.ca. project team review investigate complaints, respond way deems appropriate circumstances. project team obligated maintain confidentiality regard reporter incident. details specific enforcement policies may posted separately. Project maintainers follow enforce Code Conduct good faith may face temporary permanent repercussions determined members project’s leadership.","code":""},{"path":"https://ubc-mds.github.io/compassistr/CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Code of Conduct","text":"Code Conduct adapted Contributor Covenant homepage, version 1.4.","code":""},{"path":"https://ubc-mds.github.io/compassistr/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to compassistr","title":"Contributing to compassistr","text":"outlines propose change compassistr. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://ubc-mds.github.io/compassistr/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to compassistr","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://ubc-mds.github.io/compassistr/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to compassistr","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. open ideas recommendations new computational tools help video game completionist tasks. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://ubc-mds.github.io/compassistr/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to compassistr","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"UBC-MDS/compassistr\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://ubc-mds.github.io/compassistr/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to compassistr","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://ubc-mds.github.io/compassistr/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to compassistr","text":"Please note compassistr project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://ubc-mds.github.io/compassistr/CONTRIBUTING.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributing to compassistr","text":"contribution guidelines adapted tidyverse contributing guidelines.","code":""},{"path":"https://ubc-mds.github.io/compassistr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 compassistr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ubc-mds.github.io/compassistr/articles/compassistr.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"compassistr","text":"set tools help compute task time/ probabilities video game completionist tasks. “Completionism” common goal video games, referring goal achieving every objective game (individual extraneous side-objectives), opposed merely enough win. Common examples include hunting Shiny Pokemon, Runescape Collection Log, World Warcraft Achievement Log, among many others. Completionism generally exercise goal setting, dedication, time-commitment, efficiency. example time scales involved, hunting single shiny Pokemon can takes dozens hours, completing individual Runescape bosses can take less ten many thousands hours, impossible task completing entire collection log estimated 500 years play time. Small optimizations potential save large amounts time effort, completionist players often efficiency-oriented necessity. package provides tools help completionist players focus analyze goals. tools compute visualize expected attempts, play times, probabilities help players understand goals compare efficiency different methods. Current tools developed use cases focusing goals games Oldschool Runescape Pokemon, use cases easily generalized applications.","code":""},{"path":[]},{"path":"https://ubc-mds.github.io/compassistr/articles/compassistr.html","id":"installingrunning-compassistr","dir":"Articles","previous_headings":"Package Usage","what":"Installing/Running compassistr","title":"compassistr","text":"install current version compassistr, please run following code. necessary, un-comment first line install devtools package already installed. compassistr currently available CRAN. installed, can use compassistr active R session using following command:","code":"# install.packages(\"devtools\") devtools::install_github(\"UBC-MDS/compassistr\") library(compassistr)"},{"path":"https://ubc-mds.github.io/compassistr/articles/compassistr.html","id":"boss_completion","dir":"Articles","previous_headings":"Package Usage","what":"boss_completion()","title":"compassistr","text":"function focuses goal setting. Specifically, challenges multiple rewards (.e. boss drops many desirable items) computes expected number completions get least one reward (‘completing’ boss), allowing users decide goal worth expected time commitment. full example; Oldschool Runescape challenge called Tombs Amascut: https://oldschool.runescape.wiki/w/Tombs_of_Amascut. seven main unique rewards drop table: https://oldschool.runescape.wiki/w/Chest_(Tombs_of_Amascut)#Opened, 100% chance receive item table rolled. probability roll drop table depends level challenge completed, calculation assume 1/20 (corresponding 325 raid level, walk path active). challenge drop table mechanic, enter base rate arguments, just probability drops upon completion. calculate number completions required: $count expected number completions $conv converge factor. anything 1 error thrown, please post use case issue package repo: https://github.com/UBC-MDS/compassistr function additional functionality, acting simplified version dry_calc function. attempts argument passed, calculates binomial probability receiving least one item (completing boss) given number attempts, $prob percentage probability.","code":"# Enter drop rates and base_rate rates <- c(7/24, 7/24, 3/24, 2/24, 2/24, 2/24, 1/24) #ToA droprates base <- 1/20 #Probability to recieve an item  boss_completion(rates = rates, base_rate = base, verbose = FALSE) #> $conv #> [1] 1 #>  #> $count #> [1] 673 attempts = 1000 boss_completion(rates = rates, base_rate = base, attempts = 1000, verbose = FALSE) #> $conv #> [1] 1 #>  #> $count #> [1] 673 #>  #> $prob #> [1] 77.39"},{"path":"https://ubc-mds.github.io/compassistr/articles/compassistr.html","id":"dry_calc","dir":"Articles","previous_headings":"Package Usage","what":"dry_calc()","title":"compassistr","text":"dry_calc() focuses around assessing probability least one event occurring specific number attempts. completionist context used cases determining probability obtaining specific item boss given number attempts based bosses drop rate. Players often want know lucky/ unlucky certain goal, obtaining rare item much quicker expected, conversely going far beyond expected drop rate. full example, Dragon Warhammer https://oldschool.runescape.wiki/w/Dragon_warhammer important item Old School Runescape, obtainable 1/5000 drop specific enemy. streamer named Settled famously extremely unlucky (“dry”) obtaining item, obtaining 24386 kills. Therefore according dry_calc Settled 99.3% chance obtain one main kills, meaning 0.7% players go equally dry. dry_calc can also plot cumulative binomial CDF see probability curve user currently , probability changes either direction:","code":"dry_calc(1/5000, 24836L, verbose = FALSE, plot = FALSE) #> [1] 0.9930408 dry_calc(1/5000, 24836L, verbose = FALSE, plot = TRUE) #> [1] 0.9930408"},{"path":"https://ubc-mds.github.io/compassistr/articles/compassistr.html","id":"shiny_hunt","dir":"Articles","previous_headings":"Package Usage","what":"shiny_hunt()","title":"compassistr","text":"shiny_hunt() developed specific application catching shiny Pokemon https://pokemon.fandom.com/wiki/Shiny_Pokémon. encounter rate depends ‘gen’ (release series) desired Pokemon, required input gen Optional inputs enhance accuracy include: masuda shiny_charm, Booleans representing specific shiny hunting methods. Default false. encounter_rate: % probability encountering desired Pokemon hunting location. .e. area 30% encounters desired Pokemon, 30. Default 100% rate encountering shiny (non specific) attempt_time time seconds per encounter hunting wild shiny Pokemon. Depends hunting region/ user speed, requires self measurement user. hatch_time time seconds hatch egg, specific breeding shiny methods. Depends specific Pokemon. example gen 8 pokemon 75% encounter rate region, user utilizing Shiny Charm method getting 3 encounters per minute expect: output range probability quantiles function attempts (Pokemon encounters case) hours taken. .e. user 90% chance obtain desired shiny 29.01 hours.","code":"shiny_hunt(gen = 8, encounter_rate = 75, attempt_time = 20, shiny_charm = TRUE) #> # A tibble: 5 × 3 #>   perc_chance attempts hours #>   <chr>          <dbl> <dbl> #> 1 25%              653  3.63 #> 2 50%             1573  8.74 #> 3 75%             3145 17.5  #> 4 90%             5221 29.0  #> 5 99%            10441 58.0"},{"path":"https://ubc-mds.github.io/compassistr/articles/compassistr.html","id":"pts_calc","dir":"Articles","previous_headings":"Package Usage","what":"pts_calc()","title":"compassistr","text":"pts_calc function designed compare different strategies, cases user needs obtain certain threshold points purchase item, reward expected certain threshold points. can also generalized boss kills, rather points (.e. different kills/ time different methods). function outputs ranked list methods provided, along time completion method. Points times passed ordered numeric vector – order must correct results. example, Chambers Xeric Runescape https://oldschool.runescape.wiki/w/Chambers_of_Xeric, player might able finish solo normal mode raid approximately 30 minutes around 32,000 points, challenge mode raid 65 minutes 60,000 points. player obtain unique item approximately every 800,000 points. can therefore see first method take 750 minutes receive item, second take 867 minutes.","code":"pts_calc(points_attempt = c(32000, 60000),time_attempt = c(30, 65) ,target_points = 800000) #> [1] 750.000 866.667"},{"path":"https://ubc-mds.github.io/compassistr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Samson Bakos. Author, maintainer. Waiel Tinwala. Author. Marian Agyby. Author. Ashwin Babu. Author.","code":""},{"path":"https://ubc-mds.github.io/compassistr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bakos S, Tinwala W, Agyby M, Babu (2023). compassistr: completionist assistant tool. R package version 0.0.0.9000, https://ubc-mds.github.io/compassistr/.","code":"@Manual{,   title = {compassistr: A completionist assistant tool},   author = {Samson Bakos and Waiel Tinwala and Marian Agyby and Ashwin Babu},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://ubc-mds.github.io/compassistr/}, }"},{"path":[]},{"path":[]},{"path":"https://ubc-mds.github.io/compassistr/index.html","id":"authors-main-contributors-samson-bakos-marian-agyby-waiel-tinwala-ashwin-babu","dir":"","previous_headings":"Completionist Assistant","what":"Authors/ Main Contributors: Samson Bakos, Marian Agyby, Waiel Tinwala, Ashwin Babu","title":"A completionist assistant tool","text":"set tools help compute task time/ probabilities video game completionist tasks. Visit site ! https://ubc-mds.github.io/compassistr/ “Completionism” common goal video games, referring goal achieving every objective game (individual extraneous side-objectives), opposed merely enough win. Common examples include hunting Shiny Pokemon, Runescape Collection Log, World Warcraft Achievement Log, among many others. Completionism generally exercise goal setting, dedication, time-commitment, efficiency. example time scales involved, hunting single shiny Pokemon can takes dozens hours, completing individual Runescape bosses can take less ten many thousands hours, impossible task completing entire collection log estimated 500 years play time. Small optimizations potential save large amounts time effort, completionist players often efficiency-oriented necessity. package provides tools help completionist players focus analyze goals. tools compute visualize expected attempts, play times, probabilities help players understand goals compare efficiency different methods. Current tools developed use cases focusing goals games Oldschool Runescape Pokemon, use cases easily generalized applications. following functions currently available: shiny_hunt(): Designed hunting Shiny Pokemon. Computes time find specific Shiny Pokemon based occurrence rate Pokemon specific region, Pokemon generation/game. boss_completion(): weighted permutation probability calculator computes expected attempts complete task function probabilities desired outcomes (.e. expected boss kills get items based item drop rates). Includes optional arguments also show probability overall completion/ completing task given number attempts. dry_calc(): Computes probability obtaining least one specific outcome given number trials based binomial probability (.e. probability obtaining item boss given number kills). Displays plot showing probability obtaining drop range trial counts, indicating location provided trials curve. pts_calc(): Computes expected play time obtain target point level (.e. price item, expected number points per item drop) function player’s points per attempt time per attempt. passed multiple sets points/ times, ranks possible strategies provides list time required (ranked order least maximum). tools perform similar functions functions compassist. example, giovanni package https://github.com/tgsmith61591/giovanni provides similar applications hunting Shiny Pokemon. Users sufficient understanding can also use mainstream statistical tools (.e. scipy https://github.com/scipy/scipy) replicate basic functionalities functions like dry_calc. unique application package provide centralized location multiple different tools, simplify calculation users less statistical understanding tailor outputs specific video game applications, well provide additional helpful functionalities visualizations rankings.","code":""},{"path":"https://ubc-mds.github.io/compassistr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A completionist assistant tool","text":"can install development version compassistr Github","code":"# install.packages(\"devtools\") devtools::install_github(\"UBC-MDS/compassistr\")"},{"path":"https://ubc-mds.github.io/compassistr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"A completionist assistant tool","text":"See Docs/ Vignettes usage examples individual function https://ubc-mds.github.io/compassistr/articles/compassistr.html","code":"library(compassistr)"},{"path":"https://ubc-mds.github.io/compassistr/reference/boss_completion.html","id":null,"dir":"Reference","previous_headings":"","what":"Boss Completion — boss_completion","title":"Boss Completion — boss_completion","text":"Boss Completion","code":""},{"path":"https://ubc-mds.github.io/compassistr/reference/boss_completion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boss Completion — boss_completion","text":"","code":"boss_completion(rates, base_rate = NULL, attempts = NULL, verbose = TRUE)"},{"path":"https://ubc-mds.github.io/compassistr/reference/boss_completion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boss Completion — boss_completion","text":"rates numeric vector probabilities floats 1 0. base_rate defined must sum 1 base_rate probability 1 0. case fixed rate receiving item table roll attempts Number attempts. Rounds nearest int, rounds negatives 0. Enables function return probability completion number attempts verbose Enables printed output","code":""},{"path":"https://ubc-mds.github.io/compassistr/reference/boss_completion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boss Completion — boss_completion","text":"Returns list $conv always converge 1.0. $count expected attempts given parameters. $prob element passed attempts NULL. %prob completion given attempts","code":""},{"path":"https://ubc-mds.github.io/compassistr/reference/boss_completion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boss Completion — boss_completion","text":"","code":"object <- boss_completion(rates = c(7 / 24, 7 / 24, 3 / 24, 2 / 24, 2 / 24, 2 / 24, 1 / 24), base_rate = 1/20, attempts = 673, verbose = FALSE) object$prob # gives probability of completion #> [1] 63.24 object$count # expected completion attempts #> [1] 673 object$conv # optional, check if your solution converged successfully. Should be 1.0 #> [1] 1"},{"path":"https://ubc-mds.github.io/compassistr/reference/dry_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"dry_calc — dry_calc","title":"dry_calc — dry_calc","text":"Calculates probability least one occurrence event given number attempts.","code":""},{"path":"https://ubc-mds.github.io/compassistr/reference/dry_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dry_calc — dry_calc","text":"","code":"dry_calc(p, n, verbose = TRUE, plot = TRUE)"},{"path":"https://ubc-mds.github.io/compassistr/reference/dry_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dry_calc — dry_calc","text":"p Numeric probability event occurrence. n Integer indicating number attempts. verbose Controls format returned probability; Default (TRUE) prints result chr statement; FALSE returns result numeric decimal. plot Controls printing plot showing resulting probability lies binomial distribution; Default (TRUE) shows plot.","code":""},{"path":"https://ubc-mds.github.io/compassistr/reference/dry_calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dry_calc — dry_calc","text":"number, probability least one occurrence event given number trials returned decimal (verbose set FALSE).","code":""},{"path":"https://ubc-mds.github.io/compassistr/reference/dry_calc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dry_calc — dry_calc","text":"","code":"# return numeric probability and show plot dry_calc(0.2, 5L, verbose = FALSE, plot = TRUE)  #> [1] 0.67232 # return probability in a chr statement and don't show plot dry_calc(0.5, 3L, verbose = TRUE, plot = FALSE) #> [1] \"There is a 87.5% chance of the event occurring at least once after you play 3 attempts.\""},{"path":"https://ubc-mds.github.io/compassistr/reference/pts_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates and returns the list of time required (in ranked order) to achieve target points using the different options provided in input — pts_calc","title":"Calculates and returns the list of time required (in ranked order) to achieve target points using the different options provided in input — pts_calc","text":"Calculates returns list time required (ranked order) achieve target points using different options provided input","code":""},{"path":"https://ubc-mds.github.io/compassistr/reference/pts_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates and returns the list of time required (in ranked order) to achieve target points using the different options provided in input — pts_calc","text":"","code":"pts_calc(points_attempt, time_attempt, target_points)"},{"path":"https://ubc-mds.github.io/compassistr/reference/pts_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates and returns the list of time required (in ranked order) to achieve target points using the different options provided in input — pts_calc","text":"points_attempt numeric vector number points obtained attempt time_attempt numeric vector time taken (minutes) attempt target_points Float / Integer number points targetted reach","code":""},{"path":"https://ubc-mds.github.io/compassistr/reference/pts_calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates and returns the list of time required (in ranked order) to achieve target points using the different options provided in input — pts_calc","text":"numeric vector time required (ranked order minutes) achieve target points using different options provided input","code":""},{"path":"https://ubc-mds.github.io/compassistr/reference/pts_calc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates and returns the list of time required (in ranked order) to achieve target points using the different options provided in input — pts_calc","text":"","code":"points_attempt = c(100,20,120,150,200,30) time_attempt = c(2,3,2,5,6,2) target_points = 200 pts_calc(points_attempt = points_attempt,time_attempt = time_attempt ,target_points = target_points) #> [1]  3.333  4.000  6.000  6.667 13.333 29.999"},{"path":"https://ubc-mds.github.io/compassistr/reference/shiny_hunt.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates number of attempts/hrs to encounter/hatch a shiny — shiny_hunt","title":"Calculates number of attempts/hrs to encounter/hatch a shiny — shiny_hunt","text":"Calculates number attempts/hrs encounter/hatch shiny","code":""},{"path":"https://ubc-mds.github.io/compassistr/reference/shiny_hunt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates number of attempts/hrs to encounter/hatch a shiny — shiny_hunt","text":"","code":"shiny_hunt(   gen,   masuda = FALSE,   shiny_charm = FALSE,   encounter_rate = 100,   attempt_time = 15,   hatch_time = 0 )"},{"path":"https://ubc-mds.github.io/compassistr/reference/shiny_hunt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates number of attempts/hrs to encounter/hatch a shiny — shiny_hunt","text":"gen Integer denoting generation pokemon masuda player using masuda method. Default FALSE shiny_charm player shiny charm. Default FALSE encounter_rate Rate encounter pokemon (wild encounters). Default 100% hatch_time Time (seconds) hatch single pokemon egg. Default value 0 attempt_time Time (seconds) representing average time taken encounter pokemon, soft reset. Default value 15 seconds per encounter","code":""},{"path":"https://ubc-mds.github.io/compassistr/reference/shiny_hunt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates number of attempts/hrs to encounter/hatch a shiny — shiny_hunt","text":"Tibble containing probabilities, number attempts, hours","code":""},{"path":"https://ubc-mds.github.io/compassistr/reference/shiny_hunt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates number of attempts/hrs to encounter/hatch a shiny — shiny_hunt","text":"","code":"gen = 8 e_rate = 75 att = 20 shiny_hunt(gen = gen, encounter_rate = e_rate, attempt_time = att, shiny_charm = TRUE) #> # A tibble: 5 × 3 #>   perc_chance attempts hours #>   <chr>          <dbl> <dbl> #> 1 25%              653  3.63 #> 2 50%             1573  8.74 #> 3 75%             3145 17.5  #> 4 90%             5221 29.0  #> 5 99%            10441 58.0"}]
